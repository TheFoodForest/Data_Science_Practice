import statsmodels.formula.api as smf
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec
from statsmodels.sandbox.regression.predstd import wls_prediction_std

startQ = input('Please enter file type for your data (.xlsx/.csv): ')
if startQ == '.xlsx':
    file = input('Enter path (C:\\...) to file location: ')
    #read above input, automatic format into datatable
    datatable = pd.read_excel(file)
    variableQ = input('Enter number of independent variables (1 - 5): ')
    if variableQ == '1':
        #selecting idividual columns from entire datatable
        y = datatable.loc[:,input('Enter name of dependent variable column: ')]
        x1 = datatable.loc[:,input('Enter name of independent variable column: ')]
        #statsmodels results table
        results = smf.ols('y ~ x1', data=datatable).fit()
        print(results.summary())
        #weighted least squares for confidence intervals
        prstd, iv_l, iv_u = wls_prediction_std(results)
        #plot size and creating 4x4 grid for placing graphs
        fig = plt.figure(figsize=(7,6))
        gs = GridSpec(4,4)
        #scatter plot, ols regression, intervals 
        #in rows 1,2,3 and columns 0,1,2
        ax_joint = plt.subplot(gs[1:4,0:3])
        ax_joint.plot(x1, y, 'o', label ="data")
        #results.fittedvalues are predicted y values for OLS
        ax_joint.plot(x1, results.fittedvalues, 'b--.', label="OLS")
        ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
        ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
        ax_joint.legend(loc='best')
        #x data histogram location in row 0
        #and columns 0,1,2 (across top of scatter)
        ax_marg_x = plt.subplot(gs[0,0:3])
        #y hist loc in row 1,2,3 and collumn 3
        ax_marg_y = plt.subplot(gs[1:4,3])
        #x and y histograms filled with x1 and y
        #data, width of bars = 15
        ax_marg_x.hist(x1, bins=15)
        ax_marg_y.hist(y, bins=15, orientation="horizontal")
        #remove numerical tic labes on hist.(auto on scatter plot)
        plt.setp(ax_marg_y.get_yticklabels(),visible=False)
        plt.setp(ax_marg_x.get_xticklabels(),visible=False)
        #set scatter plot labels, read name of selected column
        #from datatable
        ax_joint.set_xlabel(x1.name)
        ax_joint.set_ylabel(y.name)
        #set x and y hist. lables, read name
        #and add ' count' 
        ax_marg_x.set_ylabel(x1.name+" Count")
        ax_marg_y.set_xlabel(y.name+" Count")
        #set limits for hist. axis based off auto axis
        #for scatter.  Makes hist. bars line up with 
        #scatter numerical tic lables 
        ax_marg_x.set_xlim(ax_joint.get_xlim())
        ax_marg_y.set_ylim(ax_joint.get_ylim())
        #show the plot on screen
        plt.show()
        #rest of graphs follow same format with differnt variables
        #used for fillin in the graphs with data

    if variableQ == '2':
        #reading file for specified columns
        y = datatable.loc[:,input('Enter name of dependent variable column: ')]
        x1 = datatable.loc[:,input('Enter name of 1st independent variable column: ')]
        x2 = datatable.loc[:,input('Enter name of 2nd independent variable column: ')]
        results = smf.ols('y ~ x1 + x2', data=datatable).fit()
        print(results.summary())
        graphQ = input('Graph Individual Relationships?')
        if graphQ in ('y', 'yes', 'yep', 'yup', 'yea', 'yeah', 'ok', 'okay'):
            #plot first varibale realationship to dependent
            resultsx1 = smf.ols('y ~ x1', data=datatable).fit()
            prstd, iv_l, iv_u = wls_prediction_std(resultsx1)
            fig = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax_joint = plt.subplot(gs[1:4,0:3])
            ax_joint.plot(x1, y, 'o', label ="data")
            ax_joint.plot(x1, resultsx1.fittedvalues, 'b--.', label="OLS")
            ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
            ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
            ax_joint.legend(loc='best')
            ax_marg_x = plt.subplot(gs[0,0:3])
            ax_marg_y = plt.subplot(gs[1:4,3])
            ax_marg_x.hist(x1, bins=15)
            ax_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax_marg_x.get_xticklabels(),visible=False)
            ax_joint.set_xlabel(x1.name)
            ax_joint.set_ylabel(y.name)
            ax_marg_x.set_ylabel(x1.name+" Distribution")
            ax_marg_y.set_xlabel(y.name+" Distribution")
            ax_marg_x.set_xlim(ax_joint.get_xlim())
            ax_marg_y.set_ylim(ax_joint.get_ylim())
            fig.show()
            #plot second variable relationship to dependent
            #create new statsmodels results for y and x2 individual
            #relationship.  Will happen for each additional variable
            resultsx2 = smf.ols('y ~ x2',data=datatable).fit()
            prstd, iv_l2, iv_u2 = wls_prediction_std(resultsx2)
            fig2 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax2_joint = plt.subplot(gs[1:4,0:3])
            ax2_joint.plot(x2, y, 'o', label ="data")
            ax2_joint.plot(x2, resultsx2.fittedvalues, 'b--.', label="OLS")
            ax2_joint.plot(x2, iv_u2, 'r--', label= "Upper Interval")
            ax2_joint.plot(x2, iv_l2, 'r--', label="Lower Interval")
            ax2_joint.legend(loc='best')
            ax2_marg_x = plt.subplot(gs[0,0:3])
            ax2_marg_y = plt.subplot(gs[1:4,3])
            ax2_marg_x.hist(x2, bins=15)
            ax2_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax2_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax2_marg_x.get_xticklabels(),visible=False)
            ax2_joint.set_xlabel(x2.name)
            ax2_joint.set_ylabel(y.name)
            ax2_marg_x.set_ylabel(x2.name+" Distribution")
            ax2_marg_y.set_xlabel(y.name+" Distribution")
            ax2_marg_x.set_xlim(ax2_joint.get_xlim())
            ax2_marg_y.set_ylim(ax2_joint.get_ylim())
            fig2.show()


        else:
            print('No graph needed')

    if variableQ == '3':
        y = datatable.loc[:,input('Enter name of dependent variable column: ')]
        x1 = datatable.loc[:,input('Enter name of 1st independent variable column: ')]
        x2 = datatable.loc[:,input('Enter name of 2nd independent variable column: ')]
        x3 = datatable.loc[:,input('Enter name of 3rd independent variable column: ')]
        results = smf.ols('y ~ x1 + x2 + x3', data=datatable).fit()
        print(results.summary())
        graphQ = input('Graph Individual Relationships?')
        if graphQ in ('y', 'yes', 'yep', 'yup', 'yea', 'yeah'):
            #plot first varibale realationship to dependent
            resultsx1 = smf.ols('y ~ x1', data=datatable).fit()
            prstd, iv_l, iv_u = wls_prediction_std(resultsx1)
            fig = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax_joint = plt.subplot(gs[1:4,0:3])
            ax_joint.plot(x1, y, 'o', label ="data")
            ax_joint.plot(x1, resultsx1.fittedvalues, 'b--.', label="OLS")
            ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
            ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
            ax_joint.legend(loc='best')
            ax_marg_x = plt.subplot(gs[0,0:3])
            ax_marg_y = plt.subplot(gs[1:4,3])
            ax_marg_x.hist(x1, bins=15)
            ax_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax_marg_x.get_xticklabels(),visible=False)
            ax_joint.set_xlabel(x1.name)
            ax_joint.set_ylabel(y.name)
            ax_marg_x.set_ylabel(x1.name+" Distribution")
            ax_marg_y.set_xlabel(y.name+" Distribution")
            ax_marg_x.set_xlim(ax_joint.get_xlim())
            ax_marg_y.set_ylim(ax_joint.get_ylim())
            fig.show()
            #plot second variable relationship to dependent
            resultsx2 = smf.ols('y ~ x2',data=datatable).fit()
            prstd, iv_l2, iv_u2 = wls_prediction_std(resultsx2)
            fig2 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax2_joint = plt.subplot(gs[1:4,0:3])
            ax2_joint.plot(x2, y, 'o', label ="data")
            ax2_joint.plot(x2, resultsx2.fittedvalues, 'b--.', label="OLS")
            ax2_joint.plot(x2, iv_u2, 'r--', label= "Upper Interval")
            ax2_joint.plot(x2, iv_l2, 'r--', label="Lower Interval")
            ax2_joint.legend(loc='best')
            ax2_marg_x = plt.subplot(gs[0,0:3])
            ax2_marg_y = plt.subplot(gs[1:4,3])
            ax2_marg_x.hist(x2, bins=15)
            ax2_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax2_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax2_marg_x.get_xticklabels(),visible=False)
            ax2_joint.set_xlabel(x2.name)
            ax2_joint.set_ylabel(y.name)
            ax2_marg_x.set_ylabel(x2.name+" Distribution")
            ax2_marg_y.set_xlabel(y.name+" Distribution")
            ax2_marg_x.set_xlim(ax2_joint.get_xlim())
            ax2_marg_y.set_ylim(ax2_joint.get_ylim())
            fig2.show()
            #plot third variable relationship to dependent
            resultsx3 = smf.ols('y ~ x3',data=datatable).fit()
            prstd, iv_l3, iv_u3 = wls_prediction_std(resultsx3)
            fig3 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax3_joint = plt.subplot(gs[1:4,0:3])
            ax3_joint.plot(x3, y, 'o', label ="data")
            ax3_joint.plot(x3, resultsx3.fittedvalues, 'b--.', label="OLS")
            ax3_joint.plot(x3, iv_u3, 'r--', label= "Upper Interval")
            ax3_joint.plot(x3, iv_l3, 'r--', label="Lower Interval")
            ax3_joint.legend(loc='best')
            ax3_marg_x = plt.subplot(gs[0,0:3])
            ax3_marg_y = plt.subplot(gs[1:4,3])
            ax3_marg_x.hist(x3, bins=15)
            ax3_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax3_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax3_marg_x.get_xticklabels(),visible=False)
            ax3_joint.set_xlabel(x3.name)
            ax3_joint.set_ylabel(y.name)
            ax3_marg_x.set_ylabel(x3.name+" Distribution")
            ax3_marg_y.set_xlabel(y.name+" Distribution")
            ax3_marg_x.set_xlim(ax3_joint.get_xlim())
            ax3_marg_y.set_ylim(ax3_joint.get_ylim())
            fig3.show()

        else:
            print('No graphs needed')

    if variableQ =='4':
        y = datatable.loc[:,input('Enter name of dependent variable column: ')]
        x1 = datatable.loc[:,input('Enter name of 1st independent variable column: ')]
        x2 = datatable.loc[:,input('Enter name of 2nd independent variable column: ')]
        x3 = datatable.loc[:,input('Enter name of 3rd independent variable column: ')]
        x4 = datatable.loc[:,input('Enter name of 4th independent variable colunn: ')]
        results = smf.ols('y ~ x1 + x2 + x3 + x4', data=datatable).fit()
        print(results.summary())
        graphQ = input('Graph Individual Relationships?')
        if graphQ in ('y', 'yes', 'yep', 'yup', 'yea', 'yeah'):
            #plot first varibale realationship to dependent
            resultsx1 = smf.ols('y ~ x1', data=datatable).fit()
            prstd, iv_l, iv_u = wls_prediction_std(resultsx1)
            fig = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax_joint = plt.subplot(gs[1:4,0:3])
            ax_joint.plot(x1, y, 'o', label ="data")
            ax_joint.plot(x1, resultsx1.fittedvalues, 'b--.', label="OLS")
            ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
            ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
            ax_joint.legend(loc='best')
            ax_marg_x = plt.subplot(gs[0,0:3])
            ax_marg_y = plt.subplot(gs[1:4,3])
            ax_marg_x.hist(x1, bins=15)
            ax_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax_marg_x.get_xticklabels(),visible=False)
            ax_joint.set_xlabel(x1.name)
            ax_joint.set_ylabel(y.name)
            ax_marg_x.set_ylabel(x1.name+" Distribution")
            ax_marg_y.set_xlabel(y.name+" Distribution")
            ax_marg_x.set_xlim(ax_joint.get_xlim())
            ax_marg_y.set_ylim(ax_joint.get_ylim())
            fig.show()
            #plot second variable relationship to dependent
            resultsx2 = smf.ols('y ~ x2',data=datatable).fit()
            prstd, iv_l2, iv_u2 = wls_prediction_std(resultsx2)
            fig2 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax2_joint = plt.subplot(gs[1:4,0:3])
            ax2_joint.plot(x2, y, 'o', label ="data")
            ax2_joint.plot(x2, resultsx2.fittedvalues, 'b--.', label="OLS")
            ax2_joint.plot(x2, iv_u2, 'r--', label= "Upper Interval")
            ax2_joint.plot(x2, iv_l2, 'r--', label="Lower Interval")
            ax2_joint.legend(loc='best')
            ax2_marg_x = plt.subplot(gs[0,0:3])
            ax2_marg_y = plt.subplot(gs[1:4,3])
            ax2_marg_x.hist(x2, bins=15)
            ax2_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax2_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax2_marg_x.get_xticklabels(),visible=False)
            ax2_joint.set_xlabel(x2.name)
            ax2_joint.set_ylabel(y.name)
            ax2_marg_x.set_ylabel(x2.name+" Distribution")
            ax2_marg_y.set_xlabel(y.name+" Distribution")
            ax2_marg_x.set_xlim(ax2_joint.get_xlim())
            ax2_marg_y.set_ylim(ax2_joint.get_ylim())
            fig2.show()
            #plot third variable relationship to dependent
            resultsx3 = smf.ols('y ~ x3',data=datatable).fit()
            prstd, iv_l3, iv_u3 = wls_prediction_std(resultsx3)
            fig3 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax3_joint = plt.subplot(gs[1:4,0:3])
            ax3_joint.plot(x3, y, 'o', label ="data")
            ax3_joint.plot(x3, resultsx3.fittedvalues, 'b--.', label="OLS")
            ax3_joint.plot(x3, iv_u3, 'r--', label= "Upper Interval")
            ax3_joint.plot(x3, iv_l3, 'r--', label="Lower Interval")
            ax3_joint.legend(loc='best')
            ax3_marg_x = plt.subplot(gs[0,0:3])
            ax3_marg_y = plt.subplot(gs[1:4,3])
            ax3_marg_x.hist(x3, bins=15)
            ax3_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax3_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax3_marg_x.get_xticklabels(),visible=False)
            ax3_joint.set_xlabel(x3.name)
            ax3_joint.set_ylabel(y.name)
            ax3_marg_x.set_ylabel(x3.name+" Distribution")
            ax3_marg_y.set_xlabel(y.name+" Distribution")
            ax3_marg_x.set_xlim(ax3_joint.get_xlim())
            ax3_marg_y.set_ylim(ax3_joint.get_ylim())
            fig3.show()
            #plot fourth variable relationship to dependent
            resultsx4 = smf.ols('y ~ x4',data=datatable).fit()
            prstd, iv_l4, iv_u4 = wls_prediction_std(resultsx4)
            fig4 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax4_joint = plt.subplot(gs[1:4,0:3])
            ax4_joint.plot(x4, y, 'o', label ="data")
            ax4_joint.plot(x4, resultsx4.fittedvalues, 'b--.', label="OLS")
            ax4_joint.plot(x4, iv_u4, 'r--', label= "Upper Interval")
            ax4_joint.plot(x4, iv_l4, 'r--', label="Lower Interval")
            ax4_joint.legend(loc='best')
            ax4_marg_x = plt.subplot(gs[0,0:3])
            ax4_marg_y = plt.subplot(gs[1:4,3])
            ax4_marg_x.hist(x4, bins=15)
            ax4_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax4_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax4_marg_x.get_xticklabels(),visible=False)
            ax4_joint.set_xlabel(x4.name)
            ax4_joint.set_ylabel(y.name)
            ax4_marg_x.set_ylabel(x4.name+" Distribution")
            ax4_marg_y.set_xlabel(y.name+" Distribution")
            ax4_marg_x.set_xlim(ax4_joint.get_xlim())
            ax4_marg_y.set_ylim(ax4_joint.get_ylim())
            fig4.show()

        else:
            print('No graphs needed')

    if variableQ == '5':
        y = datatable.loc[:,input('Enter name of dependent variable column: ')]
        x1 = datatable.loc[:,input('Enter name of 1st independent variable column: ')]
        x2 = datatable.loc[:,input('Enter name of 2nd independent variable column: ')]
        x3 = datatable.loc[:,input('Enter name of 3rd independent variable column: ')]
        x4 = datatable.loc[:,input('Enter name of 4th independent variable colunn: ')]
        x5 = datatable.loc[:,input('Enter name of 5th independent variable column: ')]
        results = smf.ols('y ~ x1 + x2 + x3 + x4 + x5', data=datatable).fit()
        print(results.summary())
        graphQ = input('Graph Individual Relationships?')
        if graphQ in ('y', 'yes', 'yep', 'yup', 'yea', 'yeah'):
            #plot first varibale realationship to dependent
            resultsx1 = smf.ols('y ~ x1', data=datatable).fit()
            prstd, iv_l, iv_u = wls_prediction_std(resultsx1)
            fig = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax_joint = plt.subplot(gs[1:4,0:3])
            ax_joint.plot(x1, y, 'o', label ="data")
            ax_joint.plot(x1, resultsx1.fittedvalues, 'b--.', label="OLS")
            ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
            ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
            ax_joint.legend(loc='best')
            ax_marg_x = plt.subplot(gs[0,0:3])
            ax_marg_y = plt.subplot(gs[1:4,3])
            ax_marg_x.hist(x1, bins=15)
            ax_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax_marg_x.get_xticklabels(),visible=False)
            ax_joint.set_xlabel(x1.name)
            ax_joint.set_ylabel(y.name)
            ax_marg_x.set_ylabel(x1.name+" Distribution")
            ax_marg_y.set_xlabel(y.name+" Distribution")
            ax_marg_x.set_xlim(ax_joint.get_xlim())
            ax_marg_y.set_ylim(ax_joint.get_ylim())
            fig.show()
            #plot second variable relationship to dependent
            resultsx2 = smf.ols('y ~ x2',data=datatable).fit()
            prstd, iv_l2, iv_u2 = wls_prediction_std(resultsx2)
            fig2 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax2_joint = plt.subplot(gs[1:4,0:3])
            ax2_joint.plot(x2, y, 'o', label ="data")
            ax2_joint.plot(x2, resultsx2.fittedvalues, 'b--.', label="OLS")
            ax2_joint.plot(x2, iv_u2, 'r--', label= "Upper Interval")
            ax2_joint.plot(x2, iv_l2, 'r--', label="Lower Interval")
            ax2_joint.legend(loc='best')
            ax2_marg_x = plt.subplot(gs[0,0:3])
            ax2_marg_y = plt.subplot(gs[1:4,3])
            ax2_marg_x.hist(x2, bins=15)
            ax2_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax2_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax2_marg_x.get_xticklabels(),visible=False)
            ax2_joint.set_xlabel(x2.name)
            ax2_joint.set_ylabel(y.name)
            ax2_marg_x.set_ylabel(x2.name+" Distribution")
            ax2_marg_y.set_xlabel(y.name+" Distribution")
            ax2_marg_x.set_xlim(ax2_joint.get_xlim())
            ax2_marg_y.set_ylim(ax2_joint.get_ylim())
            fig2.show()
            #plot third variable relationship to dependent
            resultsx3 = smf.ols('y ~ x3',data=datatable).fit()
            prstd, iv_l3, iv_u3 = wls_prediction_std(resultsx3)
            fig3 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax3_joint = plt.subplot(gs[1:4,0:3])
            ax3_joint.plot(x3, y, 'o', label ="data")
            ax3_joint.plot(x3, resultsx3.fittedvalues, 'b--.', label="OLS")
            ax3_joint.plot(x3, iv_u3, 'r--', label= "Upper Interval")
            ax3_joint.plot(x3, iv_l3, 'r--', label="Lower Interval")
            ax3_joint.legend(loc='best')
            ax3_marg_x = plt.subplot(gs[0,0:3])
            ax3_marg_y = plt.subplot(gs[1:4,3])
            ax3_marg_x.hist(x3, bins=15)
            ax3_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax3_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax3_marg_x.get_xticklabels(),visible=False)
            ax3_joint.set_xlabel(x3.name)
            ax3_joint.set_ylabel(y.name)
            ax3_marg_x.set_ylabel(x3.name+" Distribution")
            ax3_marg_y.set_xlabel(y.name+" Distribution")
            ax3_marg_x.set_xlim(ax3_joint.get_xlim())
            ax3_marg_y.set_ylim(ax3_joint.get_ylim())
            fig3.show()
            #plot fourth variable relationship to dependent
            resultsx4 = smf.ols('y ~ x4',data=datatable).fit()
            prstd, iv_l4, iv_u4 = wls_prediction_std(resultsx4)
            fig4 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax4_joint = plt.subplot(gs[1:4,0:3])
            ax4_joint.plot(x4, y, 'o', label ="data")
            ax4_joint.plot(x4, resultsx4.fittedvalues, 'b--.', label="OLS")
            ax4_joint.plot(x4, iv_u4, 'r--', label= "Upper Interval")
            ax4_joint.plot(x4, iv_l4, 'r--', label="Lower Interval")
            ax4_joint.legend(loc='best')
            ax4_marg_x = plt.subplot(gs[0,0:3])
            ax4_marg_y = plt.subplot(gs[1:4,3])
            ax4_marg_x.hist(x4, bins=15)
            ax4_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax4_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax4_marg_x.get_xticklabels(),visible=False)
            ax4_joint.set_xlabel(x4.name)
            ax4_joint.set_ylabel(y.name)
            ax4_marg_x.set_ylabel(x4.name+" Distribution")
            ax4_marg_y.set_xlabel(y.name+" Distribution")
            ax4_marg_x.set_xlim(ax4_joint.get_xlim())
            ax4_marg_y.set_ylim(ax4_joint.get_ylim())
            fig4.show()
            #plot fifth variable relationship to dependent
            resultsx5 = smf.ols('y ~ x5',data=datatable).fit()
            prstd, iv_l5, iv_u5 = wls_prediction_std(resultsx4)
            fig5 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax5_joint = plt.subplot(gs[1:4,0:3])
            ax5_joint.plot(x5, y, 'o', label ="data")
            ax5_joint.plot(x5, resultsx5.fittedvalues, 'b--.', label="OLS")
            ax5_joint.plot(x5, iv_u5, 'r--', label= "Upper Interval")
            ax5_joint.plot(x5, iv_l5, 'r--', label="Lower Interval")
            ax5_joint.legend(loc='best')
            ax5_marg_x = plt.subplot(gs[0,0:3])
            ax5_marg_y = plt.subplot(gs[1:4,3])
            ax5_marg_x.hist(x5, bins=15)
            ax5_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax5_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax5_marg_x.get_xticklabels(),visible=False)
            ax5_joint.set_xlabel(x5.name)
            ax5_joint.set_ylabel(y.name)
            ax5_marg_x.set_ylabel(x5.name+" Distribution")
            ax5_marg_y.set_xlabel(y.name+" Distribution")
            ax5_marg_x.set_xlim(ax5_joint.get_xlim())
            ax5_marg_y.set_ylim(ax5_joint.get_ylim())
            fig5.show()

        else:
            print('No graphs needed')

#same process as commented above, jsut for .csv file 
if startQ == '.csv':
    file = input('Enter path (C:\\...) to file location: ')
    datatable = pd.read_csv(file)
    variableQ = input('Enter number of independent variables (1 - 5): ')
    if variableQ == '1':
       #plot first varibale realationship to dependent
            resultsx1 = smf.ols('y ~ x1', data=datatable).fit()
            prstd, iv_l, iv_u = wls_prediction_std(resultsx1)
            fig = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax_joint = plt.subplot(gs[1:4,0:3])
            ax_joint.plot(x1, y, 'o', label ="data")
            ax_joint.plot(x1, resultsx1.fittedvalues, 'b--.', label="OLS")
            ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
            ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
            ax_joint.legend(loc='best')
            ax_marg_x = plt.subplot(gs[0,0:3])
            ax_marg_y = plt.subplot(gs[1:4,3])
            ax_marg_x.hist(x1, bins=15)
            ax_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax_marg_x.get_xticklabels(),visible=False)
            ax_joint.set_xlabel(x1.name)
            ax_joint.set_ylabel(y.name)
            ax_marg_x.set_ylabel(x1.name+" Distribution")
            ax_marg_y.set_xlabel(y.name+" Distribution")
            ax_marg_x.set_xlim(ax_joint.get_xlim())
            ax_marg_y.set_ylim(ax_joint.get_ylim())
            fig.show()

    if variableQ == '2':
        #reading file for specified columns
        y = datatable.loc[:,input('Enter name of dependent variable column: ')]
        x1 = datatable.loc[:,input('Enter name of 1st independent variable column: ')]
        x2 = datatable.loc[:,input('Enter name of 2nd independent variable column: ')]
        results = smf.ols('y ~ x1 + x2', data=datatable).fit()
        print(results.summary())
        graphQ = input('Graph Individual Relationships?')
        if graphQ in ('y', 'yes', 'yep', 'yup', 'yea', 'yeah'):
            #plot first varibale realationship to dependent
            resultsx1 = smf.ols('y ~ x1', data=datatable).fit()
            prstd, iv_l, iv_u = wls_prediction_std(resultsx1)
            fig = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax_joint = plt.subplot(gs[1:4,0:3])
            ax_joint.plot(x1, y, 'o', label ="data")
            ax_joint.plot(x1, resultsx1.fittedvalues, 'b--.', label="OLS")
            ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
            ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
            ax_joint.legend(loc='best')
            ax_marg_x = plt.subplot(gs[0,0:3])
            ax_marg_y = plt.subplot(gs[1:4,3])
            ax_marg_x.hist(x1, bins=15)
            ax_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax_marg_x.get_xticklabels(),visible=False)
            ax_joint.set_xlabel(x1.name)
            ax_joint.set_ylabel(y.name)
            ax_marg_x.set_ylabel(x1.name+" Distribution")
            ax_marg_y.set_xlabel(y.name+" Distribution")
            ax_marg_x.set_xlim(ax_joint.get_xlim())
            ax_marg_y.set_ylim(ax_joint.get_ylim())
            fig.show()
            #plot second variable relationship to dependent
            resultsx2 = smf.ols('y ~ x2',data=datatable).fit()
            prstd, iv_l2, iv_u2 = wls_prediction_std(resultsx2)
            fig2 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax2_joint = plt.subplot(gs[1:4,0:3])
            ax2_joint.plot(x2, y, 'o', label ="data")
            ax2_joint.plot(x2, resultsx2.fittedvalues, 'b--.', label="OLS")
            ax2_joint.plot(x2, iv_u2, 'r--', label= "Upper Interval")
            ax2_joint.plot(x2, iv_l2, 'r--', label="Lower Interval")
            ax2_joint.legend(loc='best')
            ax2_marg_x = plt.subplot(gs[0,0:3])
            ax2_marg_y = plt.subplot(gs[1:4,3])
            ax2_marg_x.hist(x2, bins=15)
            ax2_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax2_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax2_marg_x.get_xticklabels(),visible=False)
            ax2_joint.set_xlabel(x2.name)
            ax2_joint.set_ylabel(y.name)
            ax2_marg_x.set_ylabel(x2.name+" Distribution")
            ax2_marg_y.set_xlabel(y.name+" Distribution")
            ax2_marg_x.set_xlim(ax2_joint.get_xlim())
            ax2_marg_y.set_ylim(ax2_joint.get_ylim())
            fig2.show()

        else:
            print('No graph needed')

    if variableQ == '3':
        y = datatable.loc[:,input('Enter name of dependent variable column: ')]
        x1 = datatable.loc[:,input('Enter name of 1st independent variable column: ')]
        x2 = datatable.loc[:,input('Enter name of 2nd independent variable column: ')]
        x3 = datatable.loc[:,input('Enter name of 3rd independent variable column: ')]
        results = smf.ols('y ~ x1 + x2 + x3', data=datatable).fit()
        print(results.summary())
        graphQ = input('Graph Individual Relationships?')
        if graphQ in ('y', 'yes', 'yep', 'yup', 'yea', 'yeah'):
            #plot first varibale realationship to dependent
            resultsx1 = smf.ols('y ~ x1', data=datatable).fit()
            prstd, iv_l, iv_u = wls_prediction_std(resultsx1)
            fig = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax_joint = plt.subplot(gs[1:4,0:3])
            ax_joint.plot(x1, y, 'o', label ="data")
            ax_joint.plot(x1, resultsx1.fittedvalues, 'b--.', label="OLS")
            ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
            ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
            ax_joint.legend(loc='best')
            ax_marg_x = plt.subplot(gs[0,0:3])
            ax_marg_y = plt.subplot(gs[1:4,3])
            ax_marg_x.hist(x1, bins=15)
            ax_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax_marg_x.get_xticklabels(),visible=False)
            ax_joint.set_xlabel(x1.name)
            ax_joint.set_ylabel(y.name)
            ax_marg_x.set_ylabel(x1.name+" Distribution")
            ax_marg_y.set_xlabel(y.name+" Distribution")
            ax_marg_x.set_xlim(ax_joint.get_xlim())
            ax_marg_y.set_ylim(ax_joint.get_ylim())
            fig.show()
            #plot second variable relationship to dependent
            resultsx2 = smf.ols('y ~ x2',data=datatable).fit()
            prstd, iv_l2, iv_u2 = wls_prediction_std(resultsx2)
            fig2 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax2_joint = plt.subplot(gs[1:4,0:3])
            ax2_joint.plot(x2, y, 'o', label ="data")
            ax2_joint.plot(x2, resultsx2.fittedvalues, 'b--.', label="OLS")
            ax2_joint.plot(x2, iv_u2, 'r--', label= "Upper Interval")
            ax2_joint.plot(x2, iv_l2, 'r--', label="Lower Interval")
            ax2_joint.legend(loc='best')
            ax2_marg_x = plt.subplot(gs[0,0:3])
            ax2_marg_y = plt.subplot(gs[1:4,3])
            ax2_marg_x.hist(x2, bins=15)
            ax2_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax2_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax2_marg_x.get_xticklabels(),visible=False)
            ax2_joint.set_xlabel(x2.name)
            ax2_joint.set_ylabel(y.name)
            ax2_marg_x.set_ylabel(x2.name+" Distribution")
            ax2_marg_y.set_xlabel(y.name+" Distribution")
            ax2_marg_x.set_xlim(ax2_joint.get_xlim())
            ax2_marg_y.set_ylim(ax2_joint.get_ylim())
            fig2.show()
            #plot third variable relationship to dependent
            resultsx3 = smf.ols('y ~ x3',data=datatable).fit()
            prstd, iv_l3, iv_u3 = wls_prediction_std(resultsx3)
            fig3 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax3_joint = plt.subplot(gs[1:4,0:3])
            ax3_joint.plot(x3, y, 'o', label ="data")
            ax3_joint.plot(x3, resultsx3.fittedvalues, 'b--.', label="OLS")
            ax3_joint.plot(x3, iv_u3, 'r--', label= "Upper Interval")
            ax3_joint.plot(x3, iv_l3, 'r--', label="Lower Interval")
            ax3_joint.legend(loc='best')
            ax3_marg_x = plt.subplot(gs[0,0:3])
            ax3_marg_y = plt.subplot(gs[1:4,3])
            ax3_marg_x.hist(x3, bins=15)
            ax3_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax3_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax3_marg_x.get_xticklabels(),visible=False)
            ax3_joint.set_xlabel(x3.name)
            ax3_joint.set_ylabel(y.name)
            ax3_marg_x.set_ylabel(x3.name+" Distribution")
            ax3_marg_y.set_xlabel(y.name+" Distribution")
            ax3_marg_x.set_xlim(ax3_joint.get_xlim())
            ax3_marg_y.set_ylim(ax3_joint.get_ylim())
            fig3.show()

        else:
            print('No graphs needed')

    if variableQ == '4':
        y = datatable.loc[:,input('Enter name of dependent variable column: ')]
        x1 = datatable.loc[:,input('Enter name of 1st independent variable column: ')]
        x2 = datatable.loc[:,input('Enter name of 2nd independent variable column: ')]
        x3 = datatable.loc[:,input('Enter name of 3rd independent variable column: ')]
        x4 = datatable.loc[:,input('Enter name of 4th independent variable colunn: ')]
        results = smf.ols('y ~ x1 + x2 + x3 + x4', data=datatable).fit()
        print(results.summary())
        graphQ = input('Graph Individual Relationships?')
        if graphQ in ('y', 'yes', 'yep', 'yup', 'yea', 'yeah'):
            #plot first varibale realationship to dependent
            resultsx1 = smf.ols('y ~ x1', data=datatable).fit()
            prstd, iv_l, iv_u = wls_prediction_std(resultsx1)
            fig = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax_joint = plt.subplot(gs[1:4,0:3])
            ax_joint.plot(x1, y, 'o', label ="data")
            ax_joint.plot(x1, resultsx1.fittedvalues, 'b--.', label="OLS")
            ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
            ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
            ax_joint.legend(loc='best')
            ax_marg_x = plt.subplot(gs[0,0:3])
            ax_marg_y = plt.subplot(gs[1:4,3])
            ax_marg_x.hist(x1, bins=15)
            ax_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax_marg_x.get_xticklabels(),visible=False)
            ax_joint.set_xlabel(x1.name)
            ax_joint.set_ylabel(y.name)
            ax_marg_x.set_ylabel(x1.name+" Distribution")
            ax_marg_y.set_xlabel(y.name+" Distribution")
            ax_marg_x.set_xlim(ax_joint.get_xlim())
            ax_marg_y.set_ylim(ax_joint.get_ylim())
            fig.show()
            #plot second variable relationship to dependent
            resultsx2 = smf.ols('y ~ x2',data=datatable).fit()
            prstd, iv_l2, iv_u2 = wls_prediction_std(resultsx2)
            fig2 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax2_joint = plt.subplot(gs[1:4,0:3])
            ax2_joint.plot(x2, y, 'o', label ="data")
            ax2_joint.plot(x2, resultsx2.fittedvalues, 'b--.', label="OLS")
            ax2_joint.plot(x2, iv_u2, 'r--', label= "Upper Interval")
            ax2_joint.plot(x2, iv_l2, 'r--', label="Lower Interval")
            ax2_joint.legend(loc='best')
            ax2_marg_x = plt.subplot(gs[0,0:3])
            ax2_marg_y = plt.subplot(gs[1:4,3])
            ax2_marg_x.hist(x2, bins=15)
            ax2_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax2_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax2_marg_x.get_xticklabels(),visible=False)
            ax2_joint.set_xlabel(x2.name)
            ax2_joint.set_ylabel(y.name)
            ax2_marg_x.set_ylabel(x2.name+" Distribution")
            ax2_marg_y.set_xlabel(y.name+" Distribution")
            ax2_marg_x.set_xlim(ax2_joint.get_xlim())
            ax2_marg_y.set_ylim(ax2_joint.get_ylim())
            fig2.show()
            #plot third variable relationship to dependent
            resultsx3 = smf.ols('y ~ x3',data=datatable).fit()
            prstd, iv_l3, iv_u3 = wls_prediction_std(resultsx3)
            fig3 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax3_joint = plt.subplot(gs[1:4,0:3])
            ax3_joint.plot(x3, y, 'o', label ="data")
            ax3_joint.plot(x3, resultsx3.fittedvalues, 'b--.', label="OLS")
            ax3_joint.plot(x3, iv_u3, 'r--', label= "Upper Interval")
            ax3_joint.plot(x3, iv_l3, 'r--', label="Lower Interval")
            ax3_joint.legend(loc='best')
            ax3_marg_x = plt.subplot(gs[0,0:3])
            ax3_marg_y = plt.subplot(gs[1:4,3])
            ax3_marg_x.hist(x3, bins=15)
            ax3_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax3_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax3_marg_x.get_xticklabels(),visible=False)
            ax3_joint.set_xlabel(x3.name)
            ax3_joint.set_ylabel(y.name)
            ax3_marg_x.set_ylabel(x3.name+" Distribution")
            ax3_marg_y.set_xlabel(y.name+" Distribution")
            ax3_marg_x.set_xlim(ax3_joint.get_xlim())
            ax3_marg_y.set_ylim(ax3_joint.get_ylim())
            fig3.show()
            #plot fourth variable relationship to dependent
            resultsx4 = smf.ols('y ~ x4',data=datatable).fit()
            prstd, iv_l4, iv_u4 = wls_prediction_std(resultsx4)
            fig4 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax4_joint = plt.subplot(gs[1:4,0:3])
            ax4_joint.plot(x4, y, 'o', label ="data")
            ax4_joint.plot(x4, resultsx4.fittedvalues, 'b--.', label="OLS")
            ax4_joint.plot(x4, iv_u4, 'r--', label= "Upper Interval")
            ax4_joint.plot(x4, iv_l4, 'r--', label="Lower Interval")
            ax4_joint.legend(loc='best')
            ax4_marg_x = plt.subplot(gs[0,0:3])
            ax4_marg_y = plt.subplot(gs[1:4,3])
            ax4_marg_x.hist(x4, bins=15)
            ax4_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax4_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax4_marg_x.get_xticklabels(),visible=False)
            ax4_joint.set_xlabel(x4.name)
            ax4_joint.set_ylabel(y.name)
            ax4_marg_x.set_ylabel(x4.name+" Distribution")
            ax4_marg_y.set_xlabel(y.name+" Distribution")
            ax4_marg_x.set_xlim(ax4_joint.get_xlim())
            ax4_marg_y.set_ylim(ax4_joint.get_ylim())
            fig4.show()

        else:
            print('No graphs needed')

    if variableQ == '5':
        y = datatable.loc[:,input('Enter name of dependent variable column: ')]
        x1 = datatable.loc[:,input('Enter name of 1st independent variable column: ')]
        x2 = datatable.loc[:,input('Enter name of 2nd independent variable column: ')]
        x3 = datatable.loc[:,input('Enter name of 3rd independent variable column: ')]
        x4 = datatable.loc[:,input('Enter name of 4th independent variable colunn: ')]
        x5 = datatable.loc[:,input('Enter name of 5th independent variable column: ')]
        results = smf.ols('y ~ x1 + x2 + x3 + x4 + x5', data=datatable).fit()
        print(results.summary())
        graphQ = input('Graph Individual Relationships?')
        if graphQ in ('y', 'yes', 'yep', 'yup', 'yea', 'yeah'):
            #plot first varibale realationship to dependent
            resultsx1 = smf.ols('y ~ x1', data=datatable).fit()
            prstd, iv_l, iv_u = wls_prediction_std(resultsx1)
            fig = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax_joint = plt.subplot(gs[1:4,0:3])
            ax_joint.plot(x1, y, 'o', label ="data")
            ax_joint.plot(x1, resultsx1.fittedvalues, 'b--.', label="OLS")
            ax_joint.plot(x1, iv_u, 'r--', label= "Upper Interval")
            ax_joint.plot(x1, iv_l, 'r--', label="Lower Interval")
            ax_joint.legend(loc='best')
            ax_marg_x = plt.subplot(gs[0,0:3])
            ax_marg_y = plt.subplot(gs[1:4,3])
            ax_marg_x.hist(x1, bins=15)
            ax_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax_marg_x.get_xticklabels(),visible=False)
            ax_joint.set_xlabel(x1.name)
            ax_joint.set_ylabel(y.name)
            ax_marg_x.set_ylabel(x1.name+" Distribution")
            ax_marg_y.set_xlabel(y.name+" Distribution")
            ax_marg_x.set_xlim(ax_joint.get_xlim())
            ax_marg_y.set_ylim(ax_joint.get_ylim())
            fig.show()
            #plot second variable relationship to dependent
            resultsx2 = smf.ols('y ~ x2',data=datatable).fit()
            prstd, iv_l2, iv_u2 = wls_prediction_std(resultsx2)
            fig2 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax2_joint = plt.subplot(gs[1:4,0:3])
            ax2_joint.plot(x2, y, 'o', label ="data")
            ax2_joint.plot(x2, resultsx2.fittedvalues, 'b--.', label="OLS")
            ax2_joint.plot(x2, iv_u2, 'r--', label= "Upper Interval")
            ax2_joint.plot(x2, iv_l2, 'r--', label="Lower Interval")
            ax2_joint.legend(loc='best')
            ax2_marg_x = plt.subplot(gs[0,0:3])
            ax2_marg_y = plt.subplot(gs[1:4,3])
            ax2_marg_x.hist(x2, bins=15)
            ax2_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax2_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax2_marg_x.get_xticklabels(),visible=False)
            ax2_joint.set_xlabel(x2.name)
            ax2_joint.set_ylabel(y.name)
            ax2_marg_x.set_ylabel(x2.name+" Distribution")
            ax2_marg_y.set_xlabel(y.name+" Distribution")
            ax2_marg_x.set_xlim(ax2_joint.get_xlim())
            ax2_marg_y.set_ylim(ax2_joint.get_ylim())
            fig2.show()
            #plot third variable relationship to dependent
            resultsx3 = smf.ols('y ~ x3',data=datatable).fit()
            prstd, iv_l3, iv_u3 = wls_prediction_std(resultsx3)
            fig3 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax3_joint = plt.subplot(gs[1:4,0:3])
            ax3_joint.plot(x3, y, 'o', label ="data")
            ax3_joint.plot(x3, resultsx3.fittedvalues, 'b--.', label="OLS")
            ax3_joint.plot(x3, iv_u3, 'r--', label= "Upper Interval")
            ax3_joint.plot(x3, iv_l3, 'r--', label="Lower Interval")
            ax3_joint.legend(loc='best')
            ax3_marg_x = plt.subplot(gs[0,0:3])
            ax3_marg_y = plt.subplot(gs[1:4,3])
            ax3_marg_x.hist(x3, bins=15)
            ax3_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax3_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax3_marg_x.get_xticklabels(),visible=False)
            ax3_joint.set_xlabel(x3.name)
            ax3_joint.set_ylabel(y.name)
            ax3_marg_x.set_ylabel(x3.name+" Distribution")
            ax3_marg_y.set_xlabel(y.name+" Distribution")
            ax3_marg_x.set_xlim(ax3_joint.get_xlim())
            ax3_marg_y.set_ylim(ax3_joint.get_ylim())
            fig3.show()
            #plot fourth variable relationship to dependent
            resultsx4 = smf.ols('y ~ x4',data=datatable).fit()
            prstd, iv_l4, iv_u4 = wls_prediction_std(resultsx4)
            fig4 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax4_joint = plt.subplot(gs[1:4,0:3])
            ax4_joint.plot(x4, y, 'o', label ="data")
            ax4_joint.plot(x4, resultsx4.fittedvalues, 'b--.', label="OLS")
            ax4_joint.plot(x4, iv_u4, 'r--', label= "Upper Interval")
            ax4_joint.plot(x4, iv_l4, 'r--', label="Lower Interval")
            ax4_joint.legend(loc='best')
            ax4_marg_x = plt.subplot(gs[0,0:3])
            ax4_marg_y = plt.subplot(gs[1:4,3])
            ax4_marg_x.hist(x4, bins=15)
            ax4_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax4_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax4_marg_x.get_xticklabels(),visible=False)
            ax4_joint.set_xlabel(x4.name)
            ax4_joint.set_ylabel(y.name)
            ax4_marg_x.set_ylabel(x4.name+" Distribution")
            ax4_marg_y.set_xlabel(y.name+" Distribution")
            ax4_marg_x.set_xlim(ax4_joint.get_xlim())
            ax4_marg_y.set_ylim(ax4_joint.get_ylim())
            fig4.show()
            #plot fifth variable relationship to dependent
            resultsx5 = smf.ols('y ~ x5',data=datatable).fit()
            prstd, iv_l5, iv_u5 = wls_prediction_std(resultsx4)
            fig5 = plt.figure(figsize=(7,6))
            gs = GridSpec(4,4)
            ax5_joint = plt.subplot(gs[1:4,0:3])
            ax5_joint.plot(x5, y, 'o', label ="data")
            ax5_joint.plot(x5, resultsx5.fittedvalues, 'b--.', label="OLS")
            ax5_joint.plot(x5, iv_u5, 'r--', label= "Upper Interval")
            ax5_joint.plot(x5, iv_l5, 'r--', label="Lower Interval")
            ax5_joint.legend(loc='best')
            ax5_marg_x = plt.subplot(gs[0,0:3])
            ax5_marg_y = plt.subplot(gs[1:4,3])
            ax5_marg_x.hist(x5, bins=15)
            ax5_marg_y.hist(y, bins=15, orientation="horizontal")
            plt.setp(ax5_marg_y.get_yticklabels(),visible=False)
            plt.setp(ax5_marg_x.get_xticklabels(),visible=False)
            ax5_joint.set_xlabel(x5.name)
            ax5_joint.set_ylabel(y.name)
            ax5_marg_x.set_ylabel(x5.name+" Distribution")
            ax5_marg_y.set_xlabel(y.name+" Distribution")
            ax5_marg_x.set_xlim(ax5_joint.get_xlim())
            ax5_marg_y.set_ylim(ax5_joint.get_ylim())
            fig5.show()

        else:
            print('No graphs needed')

input('Press enter to exit')
        
